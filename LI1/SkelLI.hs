-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelLI where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsLI

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsLI.Ident -> Result
transIdent x = case x of
  AbsLI.Ident string -> failure x

transProgram :: AbsLI.Program -> Result
transProgram x = case x of
  AbsLI.Prog stm -> failure x

transStm :: AbsLI.Stm -> Result
transStm x = case x of
  AbsLI.SAss ident exp -> failure x
  AbsLI.SBlock stms -> failure x
  AbsLI.SWhile exp stm -> failure x

transExp :: AbsLI.Exp -> Result
transExp x = case x of
  AbsLI.EAdd exp1 exp2 -> failure x
  AbsLI.ESub exp1 exp2 -> failure x
  AbsLI.EMul exp1 exp2 -> failure x
  AbsLI.EDiv exp1 exp2 -> failure x
  AbsLI.EInt integer -> failure x
  AbsLI.EVar ident -> failure x
