-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from ParLI.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pStm -> Stm                                 (1)
	%start_pListStm -> ListStm                         (2)
	%start_pExp1 -> Exp1                               (3)
	%start_pExp2 -> Exp2                               (4)
	%start_pExp3 -> Exp3                               (5)
	%start_pExp -> Exp                                 (6)
	Ident -> L_Ident                                   (7)
	Integer -> L_integ                                 (8)
	Program -> Stm                                     (9)
	Stm -> Ident '=' Exp ';'                           (10)
	Stm -> '{' ListStm '}'                             (11)
	Stm -> 'while' '(' Exp ')' Stm                     (12)
	ListStm ->                                         (13)
	ListStm -> Stm ListStm                             (14)
	Exp1 -> Exp1 '+' Exp2                              (15)
	Exp1 -> Exp1 '-' Exp2                              (16)
	Exp1 -> Exp2                                       (17)
	Exp2 -> Exp2 '*' Exp3                              (18)
	Exp2 -> Exp2 '/' Exp3                              (19)
	Exp2 -> Exp3                                       (20)
	Exp3 -> Integer                                    (21)
	Exp3 -> Ident                                      (22)
	Exp3 -> '(' Exp ')'                                (23)
	Exp -> Exp1                                        (24)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	'-'            { PT _ (TS _ 5) }
	'/'            { PT _ (TS _ 6) }
	';'            { PT _ (TS _ 7) }
	'='            { PT _ (TS _ 8) }
	'while'        { PT _ (TS _ 9) }
	'{'            { PT _ (TS _ 10) }
	'}'            { PT _ (TS _ 11) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pStm     rule  1
	%start_pListStm rule  2
	%start_pExp1    rule  3
	%start_pExp2    rule  4
	%start_pExp3    rule  5
	%start_pExp     rule  6
	Ident           rule  7
	Integer         rule  8
	Program         rule  9
	Stm             rules 10, 11, 12
	ListStm         rules 13, 14
	Exp1            rules 15, 16, 17
	Exp2            rules 18, 19, 20
	Exp3            rules 21, 22, 23
	Exp             rule  24

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'while'        shift, and enter state 23
	'{'            shift, and enter state 24
	L_Ident        shift, and enter state 8

	Ident          goto state 20
	Program        goto state 26
	Stm            goto state 27

State 1

	%start_pStm -> . Stm                                (rule 1)

	'while'        shift, and enter state 23
	'{'            shift, and enter state 24
	L_Ident        shift, and enter state 8

	Ident          goto state 20
	Stm            goto state 25

State 2

	%start_pListStm -> . ListStm                        (rule 2)

	'while'        shift, and enter state 23
	'{'            shift, and enter state 24
	L_Ident        shift, and enter state 8
	%eof           reduce using rule 13

	Ident          goto state 20
	Stm            goto state 21
	ListStm        goto state 22

State 3

	%start_pExp1 -> . Exp1                              (rule 3)

	'('            shift, and enter state 15
	L_Ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp1           goto state 19
	Exp2           goto state 12
	Exp3           goto state 13

State 4

	%start_pExp2 -> . Exp2                              (rule 4)

	'('            shift, and enter state 15
	L_Ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp2           goto state 18
	Exp3           goto state 13

State 5

	%start_pExp3 -> . Exp3                              (rule 5)

	'('            shift, and enter state 15
	L_Ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp3           goto state 17

State 6

	%start_pExp -> . Exp                                (rule 6)

	'('            shift, and enter state 15
	L_Ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp1           goto state 11
	Exp2           goto state 12
	Exp3           goto state 13
	Exp            goto state 14

State 7

	Ident -> . L_Ident                                  (rule 7)

	L_Ident        shift, and enter state 8


State 8

	Ident -> L_Ident .                                  (rule 7)

	')'            reduce using rule 7
	'*'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'/'            reduce using rule 7
	';'            reduce using rule 7
	'='            reduce using rule 7
	%eof           reduce using rule 7


State 9

	Exp3 -> Ident .                                     (rule 22)

	')'            reduce using rule 22
	'*'            reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'/'            reduce using rule 22
	';'            reduce using rule 22
	%eof           reduce using rule 22


State 10

	Exp3 -> Integer .                                   (rule 21)

	')'            reduce using rule 21
	'*'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'/'            reduce using rule 21
	';'            reduce using rule 21
	%eof           reduce using rule 21


State 11

	Exp1 -> Exp1 . '+' Exp2                             (rule 15)
	Exp1 -> Exp1 . '-' Exp2                             (rule 16)
	Exp -> Exp1 .                                       (rule 24)

	')'            reduce using rule 24
	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	';'            reduce using rule 24
	%eof           reduce using rule 24


State 12

	Exp1 -> Exp2 .                                      (rule 17)
	Exp2 -> Exp2 . '*' Exp3                             (rule 18)
	Exp2 -> Exp2 . '/' Exp3                             (rule 19)

	')'            reduce using rule 17
	'*'            shift, and enter state 34
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'/'            shift, and enter state 35
	';'            reduce using rule 17
	%eof           reduce using rule 17


State 13

	Exp2 -> Exp3 .                                      (rule 20)

	')'            reduce using rule 20
	'*'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'/'            reduce using rule 20
	';'            reduce using rule 20
	%eof           reduce using rule 20


State 14

	%start_pExp -> Exp .                                (rule 6)

	%eof           accept


State 15

	Exp3 -> '(' . Exp ')'                               (rule 23)

	'('            shift, and enter state 15
	L_Ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp1           goto state 11
	Exp2           goto state 12
	Exp3           goto state 13
	Exp            goto state 36

State 16

	Integer -> L_integ .                                (rule 8)

	')'            reduce using rule 8
	'*'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'/'            reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 17

	%start_pExp3 -> Exp3 .                              (rule 5)

	%eof           accept


State 18

	%start_pExp2 -> Exp2 .                              (rule 4)
	Exp2 -> Exp2 . '*' Exp3                             (rule 18)
	Exp2 -> Exp2 . '/' Exp3                             (rule 19)

	'*'            shift, and enter state 34
	'/'            shift, and enter state 35
	%eof           accept


State 19

	%start_pExp1 -> Exp1 .                              (rule 3)
	Exp1 -> Exp1 . '+' Exp2                             (rule 15)
	Exp1 -> Exp1 . '-' Exp2                             (rule 16)

	'+'            shift, and enter state 32
	'-'            shift, and enter state 33
	%eof           accept


State 20

	Stm -> Ident . '=' Exp ';'                          (rule 10)

	'='            shift, and enter state 31


State 21

	ListStm -> Stm . ListStm                            (rule 14)

	'while'        shift, and enter state 23
	'{'            shift, and enter state 24
	'}'            reduce using rule 13
	L_Ident        shift, and enter state 8
	%eof           reduce using rule 13

	Ident          goto state 20
	Stm            goto state 21
	ListStm        goto state 30

State 22

	%start_pListStm -> ListStm .                        (rule 2)

	%eof           accept


State 23

	Stm -> 'while' . '(' Exp ')' Stm                    (rule 12)

	'('            shift, and enter state 29


State 24

	Stm -> '{' . ListStm '}'                            (rule 11)

	'while'        shift, and enter state 23
	'{'            shift, and enter state 24
	'}'            reduce using rule 13
	L_Ident        shift, and enter state 8

	Ident          goto state 20
	Stm            goto state 21
	ListStm        goto state 28

State 25

	%start_pStm -> Stm .                                (rule 1)

	%eof           accept


State 26

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 27

	Program -> Stm .                                    (rule 9)

	%eof           reduce using rule 9


State 28

	Stm -> '{' ListStm . '}'                            (rule 11)

	'}'            shift, and enter state 44


State 29

	Stm -> 'while' '(' . Exp ')' Stm                    (rule 12)

	'('            shift, and enter state 15
	L_Ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp1           goto state 11
	Exp2           goto state 12
	Exp3           goto state 13
	Exp            goto state 43

State 30

	ListStm -> Stm ListStm .                            (rule 14)

	'}'            reduce using rule 14
	%eof           reduce using rule 14


State 31

	Stm -> Ident '=' . Exp ';'                          (rule 10)

	'('            shift, and enter state 15
	L_Ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp1           goto state 11
	Exp2           goto state 12
	Exp3           goto state 13
	Exp            goto state 42

State 32

	Exp1 -> Exp1 '+' . Exp2                             (rule 15)

	'('            shift, and enter state 15
	L_Ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp2           goto state 41
	Exp3           goto state 13

State 33

	Exp1 -> Exp1 '-' . Exp2                             (rule 16)

	'('            shift, and enter state 15
	L_Ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp2           goto state 40
	Exp3           goto state 13

State 34

	Exp2 -> Exp2 '*' . Exp3                             (rule 18)

	'('            shift, and enter state 15
	L_Ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp3           goto state 39

State 35

	Exp2 -> Exp2 '/' . Exp3                             (rule 19)

	'('            shift, and enter state 15
	L_Ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp3           goto state 38

State 36

	Exp3 -> '(' Exp . ')'                               (rule 23)

	')'            shift, and enter state 37


State 37

	Exp3 -> '(' Exp ')' .                               (rule 23)

	')'            reduce using rule 23
	'*'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'/'            reduce using rule 23
	';'            reduce using rule 23
	%eof           reduce using rule 23


State 38

	Exp2 -> Exp2 '/' Exp3 .                             (rule 19)

	')'            reduce using rule 19
	'*'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'/'            reduce using rule 19
	';'            reduce using rule 19
	%eof           reduce using rule 19


State 39

	Exp2 -> Exp2 '*' Exp3 .                             (rule 18)

	')'            reduce using rule 18
	'*'            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'/'            reduce using rule 18
	';'            reduce using rule 18
	%eof           reduce using rule 18


State 40

	Exp1 -> Exp1 '-' Exp2 .                             (rule 16)
	Exp2 -> Exp2 . '*' Exp3                             (rule 18)
	Exp2 -> Exp2 . '/' Exp3                             (rule 19)

	')'            reduce using rule 16
	'*'            shift, and enter state 34
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'/'            shift, and enter state 35
	';'            reduce using rule 16
	%eof           reduce using rule 16


State 41

	Exp1 -> Exp1 '+' Exp2 .                             (rule 15)
	Exp2 -> Exp2 . '*' Exp3                             (rule 18)
	Exp2 -> Exp2 . '/' Exp3                             (rule 19)

	')'            reduce using rule 15
	'*'            shift, and enter state 34
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'/'            shift, and enter state 35
	';'            reduce using rule 15
	%eof           reduce using rule 15


State 42

	Stm -> Ident '=' Exp . ';'                          (rule 10)

	';'            shift, and enter state 46


State 43

	Stm -> 'while' '(' Exp . ')' Stm                    (rule 12)

	')'            shift, and enter state 45


State 44

	Stm -> '{' ListStm '}' .                            (rule 11)

	'while'        reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	L_Ident        reduce using rule 11
	%eof           reduce using rule 11


State 45

	Stm -> 'while' '(' Exp ')' . Stm                    (rule 12)

	'while'        shift, and enter state 23
	'{'            shift, and enter state 24
	L_Ident        shift, and enter state 8

	Ident          goto state 20
	Stm            goto state 47

State 46

	Stm -> Ident '=' Exp ';' .                          (rule 10)

	'while'        reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	L_Ident        reduce using rule 10
	%eof           reduce using rule 10


State 47

	Stm -> 'while' '(' Exp ')' Stm .                    (rule 12)

	'while'        reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	L_Ident        reduce using rule 12
	%eof           reduce using rule 12


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 25
Number of terminals: 13
Number of non-terminals: 16
Number of states: 48
