-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParLI
  ( happyError
  , myLexer
  , pProgram
  , pStm
  , pListStm
  , pExp1
  , pExp2
  , pExp3
  , pExp
  ) where

import Prelude

import qualified AbsLI
import LexLI

}

%name pProgram Program
%name pStm Stm
%name pListStm ListStm
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp Exp
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('      { PT _ (TS _ 1)  }
  ')'      { PT _ (TS _ 2)  }
  '*'      { PT _ (TS _ 3)  }
  '+'      { PT _ (TS _ 4)  }
  '-'      { PT _ (TS _ 5)  }
  '/'      { PT _ (TS _ 6)  }
  ';'      { PT _ (TS _ 7)  }
  '='      { PT _ (TS _ 8)  }
  'while'  { PT _ (TS _ 9)  }
  '{'      { PT _ (TS _ 10) }
  '}'      { PT _ (TS _ 11) }
  L_Ident  { PT _ (TV $$)   }
  L_integ  { PT _ (TI $$)   }

%%

Ident :: { AbsLI.Ident }
Ident  : L_Ident { AbsLI.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Program :: { AbsLI.Program }
Program : Stm { AbsLI.Prog $1 }

Stm :: { AbsLI.Stm }
Stm
  : Ident '=' Exp ';' { AbsLI.SAss $1 $3 }
  | '{' ListStm '}' { AbsLI.SBlock $2 }
  | 'while' '(' Exp ')' Stm { AbsLI.SWhile $3 $5 }

ListStm :: { [AbsLI.Stm] }
ListStm : {- empty -} { [] } | Stm ListStm { (:) $1 $2 }

Exp1 :: { AbsLI.Exp }
Exp1
  : Exp1 '+' Exp2 { AbsLI.EAdd $1 $3 }
  | Exp1 '-' Exp2 { AbsLI.ESub $1 $3 }
  | Exp2 { $1 }

Exp2 :: { AbsLI.Exp }
Exp2
  : Exp2 '*' Exp3 { AbsLI.EMul $1 $3 }
  | Exp2 '/' Exp3 { AbsLI.EDiv $1 $3 }
  | Exp3 { $1 }

Exp3 :: { AbsLI.Exp }
Exp3
  : Integer { AbsLI.EInt $1 }
  | Ident { AbsLI.EVar $1 }
  | '(' Exp ')' { $2 }

Exp :: { AbsLI.Exp }
Exp : Exp1 { $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

